# Generated from e:/hocbaidcm/PPL/assignment/assign1/cslang-initial/cslang-initial/src/main/CSlang/parser/CSlang.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from lexererr import *


def serializedATN():
    return [
        4,0,73,608,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,
        65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,
        71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
        78,7,78,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,
        1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
        1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,
        1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
        1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,5,9,264,8,9,10,9,12,9,267,
        9,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,5,10,278,8,10,10,10,
        12,10,281,9,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,
        1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,14,
        1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,
        1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,19,1,19,1,19,
        1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,
        1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,
        1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,
        1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,27,1,27,1,27,
        1,27,1,27,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,30,1,30,
        1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,
        1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,33,1,34,1,34,
        1,35,1,35,1,35,1,36,1,36,1,36,1,37,1,37,1,37,1,38,1,38,1,38,1,39,
        1,39,1,40,1,40,1,41,1,41,1,41,1,42,1,42,1,42,1,43,1,43,1,44,1,44,
        1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,49,1,49,1,50,1,50,
        1,51,1,51,1,51,1,52,1,52,1,53,1,53,1,54,1,54,1,55,1,55,1,56,1,56,
        1,57,1,57,1,58,1,58,1,59,1,59,1,60,1,60,1,61,1,61,1,62,1,62,1,63,
        1,63,1,63,1,64,1,64,1,64,5,64,493,8,64,10,64,12,64,496,9,64,1,64,
        1,64,1,64,1,65,1,65,5,65,503,8,65,10,65,12,65,506,9,65,1,66,4,66,
        509,8,66,11,66,12,66,510,1,66,1,66,1,66,1,66,1,66,3,66,518,8,66,
        1,67,1,67,5,67,522,8,67,10,67,12,67,525,9,67,1,68,4,68,528,8,68,
        11,68,12,68,529,1,69,1,69,3,69,534,8,69,1,70,1,70,5,70,538,8,70,
        10,70,12,70,541,9,70,1,71,1,71,3,71,545,8,71,1,71,4,71,548,8,71,
        11,71,12,71,549,1,72,1,72,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,
        1,73,1,73,1,73,1,73,1,73,1,73,3,73,568,8,73,1,74,1,74,1,74,3,74,
        573,8,74,1,75,4,75,576,8,75,11,75,12,75,577,1,75,1,75,1,76,1,76,
        1,76,1,77,1,77,1,77,5,77,588,8,77,10,77,12,77,591,9,77,1,77,3,77,
        594,8,77,1,77,1,77,1,78,1,78,1,78,5,78,601,8,78,10,78,12,78,604,
        9,78,1,78,1,78,1,78,1,265,0,79,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,
        8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,
        19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,
        30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,
        41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,
        103,52,105,53,107,54,109,55,111,56,113,57,115,58,117,59,119,60,121,
        61,123,62,125,63,127,64,129,65,131,66,133,67,135,68,137,69,139,0,
        141,0,143,0,145,0,147,0,149,0,151,70,153,71,155,72,157,73,1,0,11,
        5,0,10,10,13,13,69,70,79,79,124,124,2,0,10,10,13,13,4,0,8,10,12,
        13,34,34,92,92,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,
        1,0,49,57,1,0,48,57,2,0,69,69,101,101,5,0,98,98,102,102,110,110,
        114,114,116,116,3,0,9,10,13,13,32,32,3,1,8,10,12,13,32,32,627,0,
        1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,
        0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,
        0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,
        0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,
        0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,
        0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,
        0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,
        0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,
        0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,
        0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,
        1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,
        0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,
        0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,0,127,1,0,0,0,0,
        129,1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,0,135,1,0,0,0,0,137,1,0,
        0,0,0,151,1,0,0,0,0,153,1,0,0,0,0,155,1,0,0,0,0,157,1,0,0,0,1,159,
        1,0,0,0,3,163,1,0,0,0,5,174,1,0,0,0,7,184,1,0,0,0,9,197,1,0,0,0,
        11,209,1,0,0,0,13,221,1,0,0,0,15,232,1,0,0,0,17,246,1,0,0,0,19,259,
        1,0,0,0,21,273,1,0,0,0,23,286,1,0,0,0,25,292,1,0,0,0,27,301,1,0,
        0,0,29,304,1,0,0,0,31,309,1,0,0,0,33,313,1,0,0,0,35,318,1,0,0,0,
        37,324,1,0,0,0,39,328,1,0,0,0,41,334,1,0,0,0,43,339,1,0,0,0,45,346,
        1,0,0,0,47,353,1,0,0,0,49,358,1,0,0,0,51,364,1,0,0,0,53,376,1,0,
        0,0,55,380,1,0,0,0,57,385,1,0,0,0,59,389,1,0,0,0,61,394,1,0,0,0,
        63,400,1,0,0,0,65,409,1,0,0,0,67,414,1,0,0,0,69,420,1,0,0,0,71,422,
        1,0,0,0,73,425,1,0,0,0,75,428,1,0,0,0,77,431,1,0,0,0,79,434,1,0,
        0,0,81,436,1,0,0,0,83,438,1,0,0,0,85,441,1,0,0,0,87,444,1,0,0,0,
        89,446,1,0,0,0,91,449,1,0,0,0,93,451,1,0,0,0,95,453,1,0,0,0,97,455,
        1,0,0,0,99,457,1,0,0,0,101,459,1,0,0,0,103,461,1,0,0,0,105,464,1,
        0,0,0,107,466,1,0,0,0,109,468,1,0,0,0,111,470,1,0,0,0,113,472,1,
        0,0,0,115,474,1,0,0,0,117,476,1,0,0,0,119,478,1,0,0,0,121,480,1,
        0,0,0,123,482,1,0,0,0,125,484,1,0,0,0,127,486,1,0,0,0,129,489,1,
        0,0,0,131,500,1,0,0,0,133,508,1,0,0,0,135,519,1,0,0,0,137,527,1,
        0,0,0,139,533,1,0,0,0,141,535,1,0,0,0,143,542,1,0,0,0,145,551,1,
        0,0,0,147,567,1,0,0,0,149,572,1,0,0,0,151,575,1,0,0,0,153,581,1,
        0,0,0,155,584,1,0,0,0,157,597,1,0,0,0,159,160,5,105,0,0,160,161,
        5,111,0,0,161,162,5,46,0,0,162,2,1,0,0,0,163,164,5,64,0,0,164,165,
        5,114,0,0,165,166,5,101,0,0,166,167,5,97,0,0,167,168,5,100,0,0,168,
        169,5,73,0,0,169,170,5,110,0,0,170,171,5,116,0,0,171,172,5,40,0,
        0,172,173,5,41,0,0,173,4,1,0,0,0,174,175,5,64,0,0,175,176,5,119,
        0,0,176,177,5,114,0,0,177,178,5,105,0,0,178,179,5,116,0,0,179,180,
        5,101,0,0,180,181,5,73,0,0,181,182,5,110,0,0,182,183,5,116,0,0,183,
        6,1,0,0,0,184,185,5,64,0,0,185,186,5,114,0,0,186,187,5,101,0,0,187,
        188,5,97,0,0,188,189,5,100,0,0,189,190,5,70,0,0,190,191,5,108,0,
        0,191,192,5,111,0,0,192,193,5,97,0,0,193,194,5,116,0,0,194,195,5,
        40,0,0,195,196,5,41,0,0,196,8,1,0,0,0,197,198,5,64,0,0,198,199,5,
        119,0,0,199,200,5,114,0,0,200,201,5,105,0,0,201,202,5,116,0,0,202,
        203,5,101,0,0,203,204,5,70,0,0,204,205,5,108,0,0,205,206,5,111,0,
        0,206,207,5,97,0,0,207,208,5,116,0,0,208,10,1,0,0,0,209,210,5,64,
        0,0,210,211,5,114,0,0,211,212,5,101,0,0,212,213,5,97,0,0,213,214,
        5,100,0,0,214,215,5,66,0,0,215,216,5,111,0,0,216,217,5,111,0,0,217,
        218,5,108,0,0,218,219,5,40,0,0,219,220,5,41,0,0,220,12,1,0,0,0,221,
        222,5,64,0,0,222,223,5,119,0,0,223,224,5,114,0,0,224,225,5,105,0,
        0,225,226,5,116,0,0,226,227,5,101,0,0,227,228,5,66,0,0,228,229,5,
        111,0,0,229,230,5,111,0,0,230,231,5,108,0,0,231,14,1,0,0,0,232,233,
        5,64,0,0,233,234,5,114,0,0,234,235,5,101,0,0,235,236,5,97,0,0,236,
        237,5,100,0,0,237,238,5,83,0,0,238,239,5,116,0,0,239,240,5,114,0,
        0,240,241,5,105,0,0,241,242,5,110,0,0,242,243,5,103,0,0,243,244,
        5,40,0,0,244,245,5,41,0,0,245,16,1,0,0,0,246,247,5,64,0,0,247,248,
        5,119,0,0,248,249,5,114,0,0,249,250,5,105,0,0,250,251,5,116,0,0,
        251,252,5,101,0,0,252,253,5,83,0,0,253,254,5,116,0,0,254,255,5,114,
        0,0,255,256,5,105,0,0,256,257,5,110,0,0,257,258,5,103,0,0,258,18,
        1,0,0,0,259,260,5,47,0,0,260,261,5,42,0,0,261,265,1,0,0,0,262,264,
        9,0,0,0,263,262,1,0,0,0,264,267,1,0,0,0,265,266,1,0,0,0,265,263,
        1,0,0,0,266,268,1,0,0,0,267,265,1,0,0,0,268,269,5,42,0,0,269,270,
        5,47,0,0,270,271,1,0,0,0,271,272,6,9,0,0,272,20,1,0,0,0,273,274,
        5,47,0,0,274,275,5,47,0,0,275,279,1,0,0,0,276,278,8,0,0,0,277,276,
        1,0,0,0,278,281,1,0,0,0,279,277,1,0,0,0,279,280,1,0,0,0,280,282,
        1,0,0,0,281,279,1,0,0,0,282,283,7,1,0,0,283,284,1,0,0,0,284,285,
        6,10,0,0,285,22,1,0,0,0,286,287,5,98,0,0,287,288,5,114,0,0,288,289,
        5,101,0,0,289,290,5,97,0,0,290,291,5,107,0,0,291,24,1,0,0,0,292,
        293,5,99,0,0,293,294,5,111,0,0,294,295,5,110,0,0,295,296,5,116,0,
        0,296,297,5,105,0,0,297,298,5,110,0,0,298,299,5,117,0,0,299,300,
        5,101,0,0,300,26,1,0,0,0,301,302,5,105,0,0,302,303,5,102,0,0,303,
        28,1,0,0,0,304,305,5,101,0,0,305,306,5,108,0,0,306,307,5,115,0,0,
        307,308,5,101,0,0,308,30,1,0,0,0,309,310,5,102,0,0,310,311,5,111,
        0,0,311,312,5,114,0,0,312,32,1,0,0,0,313,314,5,116,0,0,314,315,5,
        114,0,0,315,316,5,117,0,0,316,317,5,101,0,0,317,34,1,0,0,0,318,319,
        5,102,0,0,319,320,5,97,0,0,320,321,5,108,0,0,321,322,5,115,0,0,322,
        323,5,101,0,0,323,36,1,0,0,0,324,325,5,105,0,0,325,326,5,110,0,0,
        326,327,5,116,0,0,327,38,1,0,0,0,328,329,5,102,0,0,329,330,5,108,
        0,0,330,331,5,111,0,0,331,332,5,97,0,0,332,333,5,116,0,0,333,40,
        1,0,0,0,334,335,5,98,0,0,335,336,5,111,0,0,336,337,5,111,0,0,337,
        338,5,108,0,0,338,42,1,0,0,0,339,340,5,115,0,0,340,341,5,116,0,0,
        341,342,5,114,0,0,342,343,5,105,0,0,343,344,5,110,0,0,344,345,5,
        103,0,0,345,44,1,0,0,0,346,347,5,114,0,0,347,348,5,101,0,0,348,349,
        5,116,0,0,349,350,5,117,0,0,350,351,5,114,0,0,351,352,5,110,0,0,
        352,46,1,0,0,0,353,354,5,110,0,0,354,355,5,117,0,0,355,356,5,108,
        0,0,356,357,5,108,0,0,357,48,1,0,0,0,358,359,5,99,0,0,359,360,5,
        108,0,0,360,361,5,97,0,0,361,362,5,115,0,0,362,363,5,115,0,0,363,
        50,1,0,0,0,364,365,5,99,0,0,365,366,5,111,0,0,366,367,5,110,0,0,
        367,368,5,115,0,0,368,369,5,116,0,0,369,370,5,114,0,0,370,371,5,
        117,0,0,371,372,5,99,0,0,372,373,5,116,0,0,373,374,5,111,0,0,374,
        375,5,114,0,0,375,52,1,0,0,0,376,377,5,118,0,0,377,378,5,97,0,0,
        378,379,5,114,0,0,379,54,1,0,0,0,380,381,5,115,0,0,381,382,5,101,
        0,0,382,383,5,108,0,0,383,384,5,102,0,0,384,56,1,0,0,0,385,386,5,
        110,0,0,386,387,5,101,0,0,387,388,5,119,0,0,388,58,1,0,0,0,389,390,
        5,118,0,0,390,391,5,111,0,0,391,392,5,105,0,0,392,393,5,100,0,0,
        393,60,1,0,0,0,394,395,5,99,0,0,395,396,5,111,0,0,396,397,5,110,
        0,0,397,398,5,115,0,0,398,399,5,116,0,0,399,62,1,0,0,0,400,401,5,
        99,0,0,401,402,5,111,0,0,402,403,5,110,0,0,403,404,5,115,0,0,404,
        405,5,116,0,0,405,406,5,97,0,0,406,407,5,110,0,0,407,408,5,116,0,
        0,408,64,1,0,0,0,409,410,5,102,0,0,410,411,5,117,0,0,411,412,5,110,
        0,0,412,413,5,99,0,0,413,66,1,0,0,0,414,415,5,97,0,0,415,416,5,114,
        0,0,416,417,5,114,0,0,417,418,5,97,0,0,418,419,5,121,0,0,419,68,
        1,0,0,0,420,421,5,33,0,0,421,70,1,0,0,0,422,423,5,38,0,0,423,424,
        5,38,0,0,424,72,1,0,0,0,425,426,5,124,0,0,426,427,5,124,0,0,427,
        74,1,0,0,0,428,429,5,61,0,0,429,430,5,61,0,0,430,76,1,0,0,0,431,
        432,5,33,0,0,432,433,5,61,0,0,433,78,1,0,0,0,434,435,5,60,0,0,435,
        80,1,0,0,0,436,437,5,62,0,0,437,82,1,0,0,0,438,439,5,60,0,0,439,
        440,5,61,0,0,440,84,1,0,0,0,441,442,5,62,0,0,442,443,5,61,0,0,443,
        86,1,0,0,0,444,445,5,61,0,0,445,88,1,0,0,0,446,447,5,58,0,0,447,
        448,5,61,0,0,448,90,1,0,0,0,449,450,5,43,0,0,450,92,1,0,0,0,451,
        452,5,45,0,0,452,94,1,0,0,0,453,454,5,42,0,0,454,96,1,0,0,0,455,
        456,5,92,0,0,456,98,1,0,0,0,457,458,5,37,0,0,458,100,1,0,0,0,459,
        460,5,47,0,0,460,102,1,0,0,0,461,462,5,60,0,0,462,463,5,45,0,0,463,
        104,1,0,0,0,464,465,5,94,0,0,465,106,1,0,0,0,466,467,5,46,0,0,467,
        108,1,0,0,0,468,469,5,44,0,0,469,110,1,0,0,0,470,471,5,59,0,0,471,
        112,1,0,0,0,472,473,5,58,0,0,473,114,1,0,0,0,474,475,5,41,0,0,475,
        116,1,0,0,0,476,477,5,40,0,0,477,118,1,0,0,0,478,479,5,91,0,0,479,
        120,1,0,0,0,480,481,5,93,0,0,481,122,1,0,0,0,482,483,5,123,0,0,483,
        124,1,0,0,0,484,485,5,125,0,0,485,126,1,0,0,0,486,487,5,64,0,0,487,
        488,3,131,65,0,488,128,1,0,0,0,489,494,5,34,0,0,490,493,3,147,73,
        0,491,493,8,2,0,0,492,490,1,0,0,0,492,491,1,0,0,0,493,496,1,0,0,
        0,494,492,1,0,0,0,494,495,1,0,0,0,495,497,1,0,0,0,496,494,1,0,0,
        0,497,498,5,34,0,0,498,499,6,64,1,0,499,130,1,0,0,0,500,504,7,3,
        0,0,501,503,7,4,0,0,502,501,1,0,0,0,503,506,1,0,0,0,504,502,1,0,
        0,0,504,505,1,0,0,0,505,132,1,0,0,0,506,504,1,0,0,0,507,509,3,145,
        72,0,508,507,1,0,0,0,509,510,1,0,0,0,510,508,1,0,0,0,510,511,1,0,
        0,0,511,517,1,0,0,0,512,518,3,141,70,0,513,518,3,143,71,0,514,515,
        3,141,70,0,515,516,3,143,71,0,516,518,1,0,0,0,517,512,1,0,0,0,517,
        513,1,0,0,0,517,514,1,0,0,0,518,134,1,0,0,0,519,523,7,5,0,0,520,
        522,7,6,0,0,521,520,1,0,0,0,522,525,1,0,0,0,523,521,1,0,0,0,523,
        524,1,0,0,0,524,136,1,0,0,0,525,523,1,0,0,0,526,528,3,145,72,0,527,
        526,1,0,0,0,528,529,1,0,0,0,529,527,1,0,0,0,529,530,1,0,0,0,530,
        138,1,0,0,0,531,534,3,91,45,0,532,534,3,93,46,0,533,531,1,0,0,0,
        533,532,1,0,0,0,534,140,1,0,0,0,535,539,3,107,53,0,536,538,3,145,
        72,0,537,536,1,0,0,0,538,541,1,0,0,0,539,537,1,0,0,0,539,540,1,0,
        0,0,540,142,1,0,0,0,541,539,1,0,0,0,542,544,7,7,0,0,543,545,3,139,
        69,0,544,543,1,0,0,0,544,545,1,0,0,0,545,547,1,0,0,0,546,548,3,145,
        72,0,547,546,1,0,0,0,548,549,1,0,0,0,549,547,1,0,0,0,549,550,1,0,
        0,0,550,144,1,0,0,0,551,552,7,6,0,0,552,146,1,0,0,0,553,554,5,92,
        0,0,554,568,5,92,0,0,555,556,5,92,0,0,556,568,5,98,0,0,557,558,5,
        92,0,0,558,568,5,102,0,0,559,560,5,92,0,0,560,568,5,114,0,0,561,
        562,5,92,0,0,562,568,5,110,0,0,563,564,5,92,0,0,564,568,5,116,0,
        0,565,566,5,92,0,0,566,568,5,34,0,0,567,553,1,0,0,0,567,555,1,0,
        0,0,567,557,1,0,0,0,567,559,1,0,0,0,567,561,1,0,0,0,567,563,1,0,
        0,0,567,565,1,0,0,0,568,148,1,0,0,0,569,570,5,92,0,0,570,573,8,8,
        0,0,571,573,5,92,0,0,572,569,1,0,0,0,572,571,1,0,0,0,573,150,1,0,
        0,0,574,576,7,9,0,0,575,574,1,0,0,0,576,577,1,0,0,0,577,575,1,0,
        0,0,577,578,1,0,0,0,578,579,1,0,0,0,579,580,6,75,0,0,580,152,1,0,
        0,0,581,582,9,0,0,0,582,583,6,76,2,0,583,154,1,0,0,0,584,589,5,34,
        0,0,585,588,3,147,73,0,586,588,8,2,0,0,587,585,1,0,0,0,587,586,1,
        0,0,0,588,591,1,0,0,0,589,587,1,0,0,0,589,590,1,0,0,0,590,593,1,
        0,0,0,591,589,1,0,0,0,592,594,7,10,0,0,593,592,1,0,0,0,594,595,1,
        0,0,0,595,596,6,77,3,0,596,156,1,0,0,0,597,602,5,34,0,0,598,601,
        3,147,73,0,599,601,8,2,0,0,600,598,1,0,0,0,600,599,1,0,0,0,601,604,
        1,0,0,0,602,600,1,0,0,0,602,603,1,0,0,0,603,605,1,0,0,0,604,602,
        1,0,0,0,605,606,3,149,74,0,606,607,6,78,4,0,607,158,1,0,0,0,22,0,
        265,279,492,494,504,510,517,523,529,533,539,544,549,567,572,577,
        587,589,593,600,602,5,6,0,0,1,64,0,1,76,1,1,77,2,1,78,3
    ]

class CSlangLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    BLOCK_COMMENT = 10
    LINE_COMMENT = 11
    BREAK = 12
    CONTINUE = 13
    IF = 14
    ELSE = 15
    FOR = 16
    TRUE = 17
    FALSE = 18
    INT = 19
    FLOAT = 20
    BOOL = 21
    STRING = 22
    RETURN = 23
    NULL = 24
    CLASS = 25
    CONSTRUCTOR = 26
    VAR = 27
    SELF = 28
    NEW = 29
    VOID = 30
    CONST = 31
    CONSTANT = 32
    FUNC = 33
    ARRAY = 34
    NOT = 35
    AND = 36
    OR = 37
    EQUAL = 38
    NOT_EQUAL = 39
    LESS = 40
    GREATER = 41
    LESS_EQUAL = 42
    GREATER_EQUAL = 43
    INITIAL = 44
    ASSIGN = 45
    PLUS = 46
    MINUS = 47
    MULTIPLY = 48
    DIVIDE_I = 49
    DIVIDE_I_L = 50
    DIVIDE_F = 51
    SUPER_CLASS = 52
    STRING_CONCAT = 53
    DOT = 54
    COMMA = 55
    SEMICOLON = 56
    COLON = 57
    RPAREN = 58
    LPAREN = 59
    LBRACK = 60
    RBRACK = 61
    LBRASE = 62
    RBRASE = 63
    AT_ID = 64
    STRING_LITERAL = 65
    ID = 66
    FLOAT_LITERAL = 67
    NON_ZERO_INT = 68
    INT_LITERAL = 69
    WS = 70
    ERROR_CHAR = 71
    UNCLOSE_STRING = 72
    ILLEGAL_ESCAPE = 73

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'io.'", "'@readInt()'", "'@writeInt'", "'@readFloat()'", "'@writeFloat'", 
            "'@readBool()'", "'@writeBool'", "'@readString()'", "'@writeString'", 
            "'break'", "'continue'", "'if'", "'else'", "'for'", "'true'", 
            "'false'", "'int'", "'float'", "'bool'", "'string'", "'return'", 
            "'null'", "'class'", "'constructor'", "'var'", "'self'", "'new'", 
            "'void'", "'const'", "'constant'", "'func'", "'array'", "'!'", 
            "'&&'", "'||'", "'=='", "'!='", "'<'", "'>'", "'<='", "'>='", 
            "'='", "':='", "'+'", "'-'", "'*'", "'\\'", "'%'", "'/'", "'<-'", 
            "'^'", "'.'", "','", "';'", "':'", "')'", "'('", "'['", "']'", 
            "'{'", "'}'" ]

    symbolicNames = [ "<INVALID>",
            "BLOCK_COMMENT", "LINE_COMMENT", "BREAK", "CONTINUE", "IF", 
            "ELSE", "FOR", "TRUE", "FALSE", "INT", "FLOAT", "BOOL", "STRING", 
            "RETURN", "NULL", "CLASS", "CONSTRUCTOR", "VAR", "SELF", "NEW", 
            "VOID", "CONST", "CONSTANT", "FUNC", "ARRAY", "NOT", "AND", 
            "OR", "EQUAL", "NOT_EQUAL", "LESS", "GREATER", "LESS_EQUAL", 
            "GREATER_EQUAL", "INITIAL", "ASSIGN", "PLUS", "MINUS", "MULTIPLY", 
            "DIVIDE_I", "DIVIDE_I_L", "DIVIDE_F", "SUPER_CLASS", "STRING_CONCAT", 
            "DOT", "COMMA", "SEMICOLON", "COLON", "RPAREN", "LPAREN", "LBRACK", 
            "RBRACK", "LBRASE", "RBRASE", "AT_ID", "STRING_LITERAL", "ID", 
            "FLOAT_LITERAL", "NON_ZERO_INT", "INT_LITERAL", "WS", "ERROR_CHAR", 
            "UNCLOSE_STRING", "ILLEGAL_ESCAPE" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "BLOCK_COMMENT", "LINE_COMMENT", "BREAK", 
                  "CONTINUE", "IF", "ELSE", "FOR", "TRUE", "FALSE", "INT", 
                  "FLOAT", "BOOL", "STRING", "RETURN", "NULL", "CLASS", 
                  "CONSTRUCTOR", "VAR", "SELF", "NEW", "VOID", "CONST", 
                  "CONSTANT", "FUNC", "ARRAY", "NOT", "AND", "OR", "EQUAL", 
                  "NOT_EQUAL", "LESS", "GREATER", "LESS_EQUAL", "GREATER_EQUAL", 
                  "INITIAL", "ASSIGN", "PLUS", "MINUS", "MULTIPLY", "DIVIDE_I", 
                  "DIVIDE_I_L", "DIVIDE_F", "SUPER_CLASS", "STRING_CONCAT", 
                  "DOT", "COMMA", "SEMICOLON", "COLON", "RPAREN", "LPAREN", 
                  "LBRACK", "RBRACK", "LBRASE", "RBRASE", "AT_ID", "STRING_LITERAL", 
                  "ID", "FLOAT_LITERAL", "NON_ZERO_INT", "INT_LITERAL", 
                  "SIGN", "DECIMAL", "EXPONENT", "DIGIT", "ESC_SEQ", "ILL_ESQ", 
                  "WS", "ERROR_CHAR", "UNCLOSE_STRING", "ILLEGAL_ESCAPE" ]

    grammarFileName = "CSlang.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[64] = self.STRING_LITERAL_action 
            actions[76] = self.ERROR_CHAR_action 
            actions[77] = self.UNCLOSE_STRING_action 
            actions[78] = self.ILLEGAL_ESCAPE_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def STRING_LITERAL_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
            self.text = self.text[1:-1]
     

    def ERROR_CHAR_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 1:
            raise ErrorToken(self.text)
     

    def UNCLOSE_STRING_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 2:

            unclose_string= str(self.text);
            whatif =['\b', '\t', '\f', '\n', '\r', '\\']
            if unclose_string[-1] in whatif:
                raise UncloseString(unclose_string[1:-1])
            else:
                raise UncloseString(unclose_string[1:])

     

    def ILLEGAL_ESCAPE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 3:

            raise IllegalEscape(self.text[1:])

     


